swagger: "2.0"
info:
  description: "This is an HTTP API for interacting with Disciplina Witness node. It is used by Block Explorer frontend to request info about blocks, accounts and transactions."
  version: 0.1.0
  title: Disciplina Block Explorer API
  termsOfService: "https://disciplina.io/tnc.pdf"
  contact:
    email: hi@serokell.io
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: /api/witness/v1
schemes:
  - https
  - http
paths:
  /hash/{hash}:
    get:
      summary: Get type of entity identified by given hash
      operationId: getHashType
      produces:
      - application/json
      parameters:
      - in: path
        name: hash
        description: Block header hash, tx id or address.
        required: true
        type: string
        format: byte
      responses:
        200:
          description: >-
            Type of the entity:
              * `block`
              * `address`
              * `transaction`
              * `publication`
              * `unknown`
          schema:
            type: string
            enum:
            - block
            - address
            - transaction
            - publication
            - unknown
  /blocks:
    get:
      summary: Get list of blocks.
      description: >-
        Return a batch of `count` most recent blocks.
        `prevHash` of the oldest block in the batch can be passed as `from` parameter to get the next batch.
      operationId: getBlocks
      produces:
      - application/json
      parameters:
      - in: query
        name: from
        description: >-
          Get a batch of blocks starting with the specified one.
          If not specified, get the most recent blocks.
        type: string
        format: byte
      - in: query
        name: count
        description: The amount of blocks returned.
        default: 100
        maximum: 100
        type: integer
        format: int32
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/BlockInfo"
        400:
          description: Invalid input
          schema:
            $ref: "#/definitions/ErrResponse"
  /blocks/{headerHash}:
    get:
      summary: Get information about a block.
      operationId: getBlock
      produces:
      - application/json
      parameters:
      - in: path
        name: headerHash
        description: Block identifier (hash of the block header).
        required: true
        type: string
        format: byte
      responses:
        200:
          description: Successful operation
          schema:
            allOf:
            - $ref: "#/definitions/BlockInfo"
            - $ref: "#/definitions/BlockTransactionList"
        400:
          description: Invalid input
          schema:
            $ref: "#/definitions/ErrResponse"
        404:
          description: Block not found
          schema:
            $ref: "#/definitions/ErrResponse"
  /accounts/{address}:
    get:
      summary: Get information about an account.
      operationId: getAccount
      produces:
      - application/json
      parameters:
      - in: path
        name: address
        description: Address of an account being requested.
        required: true
        type: string
        format: byte
      - in: query
        name: includeTxs
        description: >-
          Whether to include transaction history for the account.
          Both incoming and outgoing transactions are included
        type: boolean
        allowEmptyValue: true
      responses:
        200:
          description: Successful operation
          schema:
            allOf:
            - $ref: "#/definitions/AccountInfo"
            - $ref: "#/definitions/TransactionList"
        400:
          description: Invalid input
          schema:
            $ref: "#/definitions/ErrResponse"
        404:
          description: Account not found
          schema:
            $ref: "#/definitions/ErrResponse"
  /transactions:
    get:
      summary: Get list of recent transactions.
      description: >-
        Return a batch of `count` most recent transactions.
      operationId: getTransactions
      produces:
      - application/json
      parameters:
      - in: query
        name: count
        description: The amount of transactions returned.
        default: 100
        maximum: 100
        type: integer
        format: int32
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              allOf:
              - $ref: "#/definitions/TransactionInfo"
              - $ref: "#/definitions/TransactionBlockInfo"
  /transactions/{transactionHash}:
    get:
      summary: Get information about a transaction.
      description: >-
        `txType` field of the result object will denote the type of transaction: "money" or "publication".
        The corresponding key in the object will contain the rest of information about the transaction.
      operationId: getTransaction
      produces:
      - application/json
      parameters:
      - in: path
        name: transactionHash
        description: Hash of the transaction being requested.
        required: true
        type: string
        format: byte
      responses:
        200:
          description: Successful operation
          schema:
            allOf:
            - $ref: "#/definitions/TransactionInfo"
            - $ref: "#/definitions/TransactionBlockInfo"
        400:
          description: Invalid input
          schema:
            $ref: "#/definitions/ErrResponse"
        404:
          description: Transaction not found
          schema:
            $ref: "#/definitions/ErrResponse"

definitions:
  Hash:
    type: string
    format: byte
  Address:
    type: string
    format: byte
  Coin:
    type: integer
    format: int64
  BlockInfo:
    type: object
    properties:
      headerHash:
        $ref: "#/definitions/Hash"
      nextHash:
        $ref: "#/definitions/Hash"
      merkleRootHash:
        $ref: "#/definitions/Hash"
      header:
        $ref: "#/definitions/BlockHeader"
      isGenesis:
        type: boolean
      since:
        type: integer
        format: int64
        description: Microseconds since UNIX epoch start
      size:
        type: integer
        format: int64
        description: Size in bytes
      transactionCount:
        type: integer
        format: int32
  BlockHeader:
    type: object
    properties:
      signature:
        type: string
        format: byte
      issuer:
        type: string
        format: byte
      difficulty:
        type: integer
        format: int64
      slotId:
        type: integer
        format: int64
      prevHash:
        $ref: "#/definitions/Hash"
      totalOutput:
        $ref: "#/definitions/Coin"
      totalFees:
        $ref: "#/definitions/Coin"
  AccountInfo:
    type: object
    properties:
      balances:
        type: object
        properties:
          confirmed:
            type: integer
            format: int32
      nextNonce:
        type: integer
        format: int32
  TransactionInfo:
    type: object
    discriminator: txType
    properties:
      txType:
        type: string
        enum:
        - money
        - publication
      txId:
        $ref: "#/definitions/Hash"
      money:
        type: object
        properties:
          inAcc:
            type: object
            properties:
              addr:
                $ref: "#/definitions/Address"
              nonce:
                type: integer
                format: int32
          inValue:
            $ref: "#/definitions/Coin"
          outs:
            type: array
            items:
              type: object
              properties:
                address:
                  $ref: "#/definitions/Address"
                value:
                  $ref: "#/definitions/Coin"
      publication:
        type: object
        properties:
          author:
            $ref: "#/definitions/Address"
          block:
            $ref: "#/definitions/Hash"
          prevBlock:
            $ref: "#/definitions/Hash"
  TransactionBlockInfo:
    type: object
    properties:
      block:
        $ref: "#/definitions/BlockInfo"
  TransactionList:
    type: object
    properties:
      transactions:
        type: array
        items:
          allOf:
          - $ref: "#/definitions/TransactionInfo"
          - $ref: "#/definitions/TransactionBlockInfo"
  BlockTransactionList:
    type: object
    properties:
      transactions:
        type: array
        items:
          $ref: "#/definitions/TransactionInfo"
  ErrResponse:
    type: object
    required:
      - error
    properties:
      error:
        type: string
        enum:
          - InvalidFormat

          - BlockNotFound
          - AccountNotFound
          - TransactionNotFound
        description: >-
          Error type:
            * `InvalidFormat` - Failed to deserialise one of parameters.

            * `BlockNotFound` - Specified block does not exist.
            * `AccountNotFound` - Specified account does not exist.
            * `TransactionNotFound` - Specified transaction does not exist.

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
