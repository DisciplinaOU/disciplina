swagger: "2.0"
info:
  description: "This is an HTTP API for interacting with Disciplina Witness node. It is used by Block Explorer frontend to request info about blocks, accounts and transactions, and by Disciplina Wallet to make transactions."
  version: 0.1.0
  title:  Disciplina Witness API
  termsOfService: "https://disciplina.io/tnc.pdf"
  contact:
    email: hi@serokell.io
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: /api/witness/v1
schemes:
  - https
  - http
paths:
  /ping:
    get:
      summary: Ping a node
      operationId: ping
      responses:
        200:
          description: Successful operation.
  /hash/{hash}:
    get:
      summary: Get type of entity identified by given hash
      operationId: getHashType
      produces:
      - application/json
      parameters:
      - in: path
        name: hash
        description: Block header hash, tx id or address.
        required: true
        type: string
        format: byte
      responses:
        200:
          description: >-
            Type of the entity:
              * `block`
              * `address`
              * `money-transaction`
              * `publication-transaction`
              * `unknown`
          schema:
            type: string
            enum:
            - block
            - address
            - money-transaction
            - publication-transaction
            - unknown
  /blocks:
    get:
      summary: Get list of blocks.
      description: >-
        Return a batch of `count` most recent blocks, skipping `skip` blocks from the tip.
      operationId: getBlocks
      produces:
      - application/json
      parameters:
      - in: query
        name: skip
        description: The amount of blocks to skip.
        default: 0
        type: integer
        format: int64
      - in: query
        name: count
        description: The amount of blocks returned.
        default: 100
        maximum: 100
        type: integer
        format: int32
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              transactions:
                type: array
                items:
                  $ref: "#/definitions/BlockInfo"
              totalCount:
                type: integer
                format: int64
        400:
          description: Invalid input
          schema:
            $ref: "#/definitions/ErrResponse"
  /blocks/{headerHash}:
    get:
      summary: Get information about a block.
      operationId: getBlock
      produces:
      - application/json
      parameters:
      - in: path
        name: headerHash
        description: Block identifier (hash of the block header).
        required: true
        type: string
        format: byte
      responses:
        200:
          description: Successful operation
          schema:
            allOf:
            - $ref: "#/definitions/BlockInfo"
            - $ref: "#/definitions/BlockTransactionList"
        400:
          description: Invalid input
          schema:
            $ref: "#/definitions/ErrResponse"
        404:
          description: Block not found
          schema:
            $ref: "#/definitions/ErrResponse"
  /accounts/{address}:
    get:
      summary: Get information about an account.
      operationId: getAccount
      produces:
      - application/json
      parameters:
      - in: path
        name: address
        description: Address of an account being requested.
        required: true
        type: string
        format: byte
      - in: query
        name: includeTxs
        description: >-
          Whether to include transaction history for the account.
          Both incoming and outgoing transactions are included
        type: boolean
        allowEmptyValue: true
      responses:
        200:
          description: Successful operation
          schema:
            allOf:
            - $ref: "#/definitions/AccountInfo"
            - $ref: "#/definitions/TransactionList"
        400:
          description: Invalid input
          schema:
            $ref: "#/definitions/ErrResponse"
        404:
          description: Account not found
          schema:
            $ref: "#/definitions/ErrResponse"
  /transactions:
    get:
      summary: Get list of recent transactions.
      description: >-
        Return a batch of `count` most recent transactions.
        If `nextId` key is present in the result, it can be passed as `from` parameter to get the next batch.
      operationId: getTransactions
      produces:
      - application/json
      parameters:
      - in: query
        name: from
        description: >-
          Get a batch of transactions starting with the specified one.
          If not specified, get the most recent transactions.
        type: string
        format: byte
      - in: query
        name: count
        description: The amount of transactions returned.
        default: 100
        maximum: 100
        type: integer
        format: int32
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              transactions:
                type: array
                items:
                  allOf:
                  - $ref: "#/definitions/TransactionInfo"
                  - $ref: "#/definitions/TransactionBlockInfo"
              nextId:
                $ref: "#/definitions/Hash"

    post:
      summary: Submit a formed transaction.
      operationId: submitTx
      produces:
      - application/json
      parameters:
      - in: body
        name: txWitnessed
        schema:
          $ref: "#/definitions/TxWitnessed"
      responses:
        201:
          description: Transaction passed validation. If no transactions spending money from the same account are submitted concurrently to other witness node, transaction will eventually appear in blockchain. Returns transaction id.
          schema:
            $ref: "#/definitions/Hash"
        400:
          description: Formed transaction is invalid.
          schema:
            $ref: '#/definitions/TxValidationError'
        403:
          description: Transaction cannot be applied.
          schema:
            $ref: '#/definitions/TxValidationError'

  /transactions/{transactionHash}:
    get:
      summary: Get information about a transaction.
      description: >-
        `txType` field of the result object will denote the type of transaction: "money" or "publication".
        The corresponding key in the object will contain the rest of information about the transaction.
      operationId: getTransaction
      produces:
      - application/json
      parameters:
      - in: path
        name: transactionHash
        description: Hash of the transaction being requested.
        required: true
        type: string
        format: byte
      responses:
        200:
          description: Successful operation
          schema:
            allOf:
            - $ref: "#/definitions/TransactionInfo"
            - $ref: "#/definitions/TransactionBlockInfo"
        400:
          description: Invalid input
          schema:
            $ref: "#/definitions/ErrResponse"
        404:
          description: Transaction not found
          schema:
            $ref: "#/definitions/ErrResponse"
  /transactions/async:
    post:
      summary: Submit a formed transaction asynchronously.
      operationId: submitTxAsync
      produces:
      - application/json
      parameters:
      - in: body
        name: txWitnessed
        schema:
          $ref: "#/definitions/TxWitnessed"
      responses:
        202:
          description: Transaction accepted. Returns transaction id.
          schema:
            $ref: "#/definitions/Hash"

definitions:
  Hash:
    type: string
    format: byte
    description: Hex-encoded hash value.
  Address:
    type: string
    format: byte
  Coin:
    type: integer
    format: int64
  BlockInfo:
    type: object
    properties:
      headerHash:
        $ref: "#/definitions/Hash"
      nextHash:
        $ref: "#/definitions/Hash"
      merkleRootHash:
        $ref: "#/definitions/Hash"
      header:
        $ref: "#/definitions/BlockHeader"
      isGenesis:
        type: boolean
      since:
        type: integer
        format: int64
        description: Microseconds since UNIX epoch start
      size:
        type: integer
        format: int64
        description: Size in bytes
      transactionCount:
        type: integer
        format: int32
  BlockHeader:
    type: object
    properties:
      signature:
        type: string
        format: byte
      issuer:
        type: string
        format: byte
      difficulty:
        type: integer
        format: int64
      slotId:
        type: integer
        format: int64
      prevHash:
        $ref: "#/definitions/Hash"
      totalOutput:
        $ref: "#/definitions/Coin"
      totalFees:
        $ref: "#/definitions/Coin"
  AccountInfo:
    type: object
    properties:
      balances:
        type: object
        properties:
          confirmed:
            type: integer
            format: int32
            description: Balance according to current chain.
          total:
            type: integer
            format: int32
            description: Balance derived from both chain and transactions which are not yet in blocks.
      currentNonce:
        type: integer
        format: int32
  TransactionInfo:
    type: object
    discriminator: txType
    properties:
      txType:
        type: string
        enum:
        - money
        - publication
      txId:
        $ref: "#/definitions/Hash"
      outValue:
        $ref: "#/definitions/Coin"
      money:
        type: object
        properties:
          inAcc:
            type: object
            properties:
              addr:
                $ref: "#/definitions/Address"
              nonce:
                type: integer
                format: int32
          inValue:
            $ref: "#/definitions/Coin"
          outs:
            type: array
            items:
              type: object
              properties:
                address:
                  $ref: "#/definitions/Address"
                value:
                  $ref: "#/definitions/Coin"
      publication:
        type: object
        properties:
          author:
            $ref: "#/definitions/Address"
          block:
            $ref: "#/definitions/Hash"
          prevBlock:
            $ref: "#/definitions/Hash"
  TransactionBlockInfo:
    type: object
    properties:
      block:
        $ref: "#/definitions/BlockInfo"
  TransactionList:
    type: object
    properties:
      transactions:
        type: array
        items:
          allOf:
          - $ref: "#/definitions/TransactionInfo"
          - $ref: "#/definitions/TransactionBlockInfo"
  BlockTransactionList:
    type: object
    properties:
      transactions:
        type: array
        items:
          $ref: "#/definitions/TransactionInfo"
  TxInAcc:
    type: object
    description: Transaction source account info.
    properties:
      nonce:
        type: integer
        format: int32
        description: Current account nonce, received in /accounts/{address} endpoint.
      addr:
        $ref: "#/definitions/Address"
  TxOut:
    type: object
    description: Transaction output.
    properties:
      outAddr:
        $ref: "#/definitions/Address"
      outValue:
        $ref: "#/definitions/Coin"
  Tx:
    type: object
    description: Transaction content.
    properties:
      inAcc:
        $ref: "#/definitions/TxInAcc"
      inValue:
        $ref: "#/definitions/Coin"
      outs:
        type: array
        items:
          $ref: "#/definitions/TxOut"
  TxWitness:
    type: object
    properties:
      sig:
        type: string
        description: Evaluated as 'signEd25519(sourceSecretKey, blake2bHash(Tx) + sourcePublicKey)', and passed in hex-encoded form to the endpoint.
      pk:
        type: string
        description: Hex-encoded public key of the source account.
  TxWitnessed:
    type: object
    properties:
      tx:
        $ref: "#/definitions/Tx"
      witness:
        $ref: "#/definitions/TxWitness"
  ErrResponse:
    type: object
    required:
      - error
    properties:
      error:
        type: string
        enum:
          - InvalidFormat

          - LEBlockAbsent
          - LETxAbsent
        description: >-
          Error type:
            * `InvalidFormat` - Failed to deserialise one of parameters.

            * `LEBlockNotFound` - Specified block does not exist.
            * `LETransactionNotFound` - Specified transaction does not exist.

  TxValidationError:
    type: object
    required:
      - error
    properties:
      error:
        type: string
        enum:
          - InvalidFormat
          - MTxNoOutputs
          - MTxDuplicatedOutputs
          - InsuffucientFees
          - AuthorDoesNotExist
          - SignatureIsCorrupted
          - NotASingletonSelfUpdate
          - NonceMustBeIncremented
          - PaymentMustBePositive
          - ReceiverMustIncreaseBalance
          - SumMustBeNonNegative
          - CannotAffordFees
          - BalanceCannotBecomeNegative
        description: >-
          Error type:
            * `InvalidFormat` - Failed to deserialise one of parameters.
            * `MTxNoOutputs` - Transaction has no outputs.
            * `MTxDuplicatedOutputs` - Transaction has duplicated outputs.
            * `InsufficientFees` - Input of transaction is too small to provide appropriate fees amount.
            * `AuthorDoesNotExist` - Source account has never received money.
            * `SignatureIsCorrupted` - Bad signature provided.
            * `NotASingletonSelfUpdate` - Cannot send money to yourself more than once in transaction.
            * `NonceMustBeIncremented` - Bad nonce for source account is used. Should be exactly "currentNonce" returned by /accounts/{address} endpoint.
            * `SumMustBeNonNegative` - Sum of payments plus fee must be less or equal to amount of money you spend.
            * `CannotAffordFees` - User balance is too small to afford transaction outputs and fees.
            * `BalanceCannotBecomeNegative` - User balance is too small to afford transaction outputs.

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
