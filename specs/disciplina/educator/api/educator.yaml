swagger: "2.0"
info:
  description: "This is an HTTP API for interacting with Disciplina Educator node on Educator side. It is meant to be used for integrating external systems, CRMs and CMSs with Disciplina"
  version: "1.0.0"
  title: "Disciplina Educator API"
  termsOfService: "https://disciplina.io/tnc.pdf"
  contact:
    email: "hi@serokell.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8090"
basePath: "/v1"
tags:
- name: "students"
  description: "Methods for working with students and their data."
schemes:
- "https"
- "http"
paths:
  /students:
    get:
      tags:
      - "students"
      summary: "Get a list of all registered students' addresses"
      description: ""
      operationId: "getStudents"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "A list of all registered students' addresses"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Student"
    post:
      tags:
      - "students"
      summary: "Add a new student address to a database"
      description: ""
      operationId: "addStudent"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Student object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Student"
      responses:
        405:
          description: "Invalid input"

  /students/{studentAddr}:
    delete:
      tags:
      - "students"
      summary: "Remove a student from a database"
      description: "Removes a student only if he's not currently attending any course. We will not automatically perform a cascade deletion, because it will make this operation particularly dangerous. If a student attends any course, an error will be raised."
      operationId: "deleteStudent"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Student"
        400:
          description: "Invalid address value"
        403:
          description: "Student cannot be deleted, as they are currently attending a course"
        404:
          description: "Student with given address not found"

  /students/{studentAddr}/courses:
    get:
      tags:
      - "students"
      summary: "Get a list of student's courses"
      description: "Gets a list of courses which student is currently attending."
      operationId: "getStudentCourses"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      responses:
        200:
          description: "successfull operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Course"
        400:
          description: "Invalid address value"
        404:
          description: "Student with given address not found"

    post:
      tags:
      - "students"
      summary: "Enroll a student in a new course"
      description: "Given existing student and course, enroll the student to the course."
      operationId: "enrollStudentToCourse"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      - in: "body"
        name: "courseId"
        description: "Course to enroll"
        required: true
        schema:
          $ref: "#/definitions/CourseId"
      responses:
        400:
          description: "Student address value or request body is invalid"
        403:
          description: "Course with given ID does not exist"
        404:
          description: "Student with given address not found"

  /students/{studentAddr}/courses/{courseId}/assignments:
    get:
      tags:
      - "students"
      summary: "Get active student's assignments for a given course"
      description: "Given student address and course ID, gets a list of all pending assignments student has as a part of a course."
      operationId: "getStudentCourseAssignments"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      - $ref: "#/parameters/CourseId"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Assignment"
        404:
          description: "Given student does not attend given course"

  /students/{studentAddr}/courses/{courseId}/submissions:
    get:
      tags:
      - "students"
      - "submissions"
      summary: "Get student's course submissions"
      description: "Gets a list of student's submissions he made during studying given course."
      operationId: "getStudentCourseSubmissions"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      - $ref: "#/parameters/CourseId"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Submission"
        400:
          description: "Given student does not attend given course"

  /students/{studentAddr}/courses/{courseId}/grades:
    get:
      tags:
      - "students"
      summary: "Get student's course grades"
      description: "Gets a list of grades a student received during studying given course."
      operationId: "getStudentCourseGrades"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      - $ref: "#/parameters/CourseId"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grade"
        400:
          description: "Given student does not attend given course"

  /students/{studentAddr}/courses/{courseId}/proofs:
    get:
      tags:
      - "students"
      summary: "Get proofs of student's course progress"
      description: "Gets student's course grades and submissions in form of private transactions, together with corresponding Merkle proofs."
      operationId: "getStudentCourseProofs"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      - $ref: "#/parameters/CourseId"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Proofs"
        400:
          description: "Given student does not attend given course"

  /students/{studentAddr}/assignments:
    get:
      tags:
      - "students"
      summary: "Get active student's assignments"
      description: "Given student address, gets a list of all pending assignments student has."
      operationId: "getStudentAssignments"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Assignment"
        404:
          description: "Student with a given address not found"
    post:
      tags:
      - "students"
      summary: "Assign an assignment to a student"
      description: "Assigns a new assignment to a student in scope of given course."
      operationId: "assignToStudent"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      - in: "body"
        name: "assignmentHash"
        description: "Assignment to assign"
        required: true
        schema:
          $ref: "#/definitions/Hash"
      responses:
        400:
          description: "Student address value or request body is invalid"
        403:
          description: "Assignment with given hash does not exist"
        404:
          description: "Student with given address not found"

  /students/{studentAddr}/assignments/{assignmentHash}:
    delete:
      tags:
      - "students"
      summary: "Unassign an assignment from a student"
      description: "If given student has been assigned a given assignment, then unassigns it from them, otherwise raises error."
      operationId: "unassignFromStudent"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      - $ref: "#/parameters/AssignmentHash"
      responses:
        400:
          description: "Student address or assignment hash are invalid"
        404:
          description: "Given student didn't have given assignment"

  /students/{studentAddr}/assignments/{assignmentHash}/submissions:
    get:
      tags:
      - "students"
      - "submissions"
      summary: "Student's submissions for an assignment"
      description: "Gets a list of student's submissions for a given assignment"
      operationId: "getStudentAssignmentSubmissions"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      - $ref: "#/parameters/AssignmentHash"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Submission"
        400:
          description: "Given student didn't have given assignment"

  /students/{studentAddr}/submissions:
    get:
      tags:
      - "students"
      - "submissions"
      summary: "Get all student's submissions"
      description: "Gets a list of all student's submissions."
      operationId: "getStudentSubmissions"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Submission"
        404:
          description: "Student with given address not found"

  /students/{studentAddr}/grades:
    get:
      tags:
      - "students"
      summary: "Get all student's grades"
      description: "Gets a list of all students grades (aka transactions in a private chain)"
      operationId: "getStudentGrades"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grade"
        404:
          description: "Student with given address not found"

  /students/{studentAddr}/proofs:
    get:
      tags:
      - "students"
      summary: "Get proofs of all student's activity"
      description: "Gets all private transactions related to a student together with corresponding Merkle proofs."
      operationId: "getStudentProofs"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/StudentAddr"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Proofs"
        404:
          description: "Student with given address not found"

  /submissions:
    get:
      tags:
      - "submissions"
      summary: "Get all submissions"
      description: "Gets a list of all submissions done by all students. This method is inaccessible by students."
      operationId: "getSubmissions"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Submission"

  /submissions/{submissionHash}:
    get:
      tags:
      - "submissions"
      summary: "Get info about a submission"
      description: "Gets a submission data by given submission hash."
      operationId: "getSubmission"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/SubmissionHash"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Submission"
        404:
          description: "Submission with given hash not found (or a user has no rights to look it up)"
    delete:
      tags:
      - "submissions"
      summary: "Delete a submission"
      description: "Deletes a submission from a database. Only ungraded submissions can be deleted."
      operationId: "deleteSubmission"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/SubmissionHash"
      responses:
        200:
          description: "successful operation"
        404:
          description: "Submission with given hash not found"

  /grades:
    get:
      tags:
      - "grades"
      summary: "Get all grades"
      description: "Gets a list of all grades performed by all students."
      operationId: "getGrades"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Grade"
    post:
      tags:
      - "grades"
      summary: "Post a new grade"
      description: "Posts a new grade with a given body."
      operationId: "postGrade"
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - in: "body"
        name: "grade"
        description: "A grade"
        required: true
        schema:
          $ref: "#/definitions/Grade"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Grade"

securityDefinitions:
  # TODO: do we need authentication for Educator API?

definitions:
  Hash:
    type: "string"
    format: "byte"
  Address:
    type: "string"
    format: "byte"
  Time:
    type: "string"
    format: "date-time"
  Student:
    type: "object"
    required:
    - "addr"
    properties:
      addr:
        $ref: "#/definitions/Address"
  CourseId:
    type: "integer"
    format: "int32"
  Course:
    type: "object"
    required:
    - "id"
    properties:
      id:
        $ref: "#/definitions/CourseId"
      desc:
        type: "string"
      subjects:
        type: "array"
        items:
          $ref: "#/definitions/Subject"
  Assignment:
    type: "object"
    required:
    - "hash"
    properties:
      hash:
        $ref: "#/definitions/Hash"
      course_id:
        $ref: "#/definitions/CourseId"
      contents_hash:
        $ref: "#/definitions/Hash"
      desc:
        type: "string"
  Submission:
    type: "object"
    required:
    - "hash"
    - "contents_hash"
    - "assignment_hash"
    - "student_addr"
    - "witness"
    properties:
      hash:
        $ref: "#/definitions/Hash"
      contents_hash:
        $ref: "#/definitions/Hash"
      assignment:
        $ref: "#/definitions/Assignment"
      student_addr:
        $ref: "#/definitions/Address"
      witness:
        type: "string"
        format: "binary"
  Grade:
    type: "object"
    properties:
      hash:
        $ref: "#/definitions/Hash"
      submission_hash:
        $ref: "#/definitions/Hash"
      grade:
        type: "integer"
        format: "int32"
      timestamp:
        $ref: "#/definitions/Time"

  Transaction:
    type: "object"
    required:
    - "signed_submission"
    - "grade"
    - "timestamp"
    properties:
      signed_submission:
        $ref: "#/definitions/Submission"
      grade:
        type: "integer"
        format: "int32"
      timestamp:
        $ref: "#/definitions/Time"

  BlkProof:
    type: "object"
    required:
    - "mtree_serialized"
    - "txs"
    properties:
      mtree_serialized:
        type: "string"
        format: "binary"
      txs:
        type: "array"
        items:
          $ref: "#/definitions/Transaction"

  Proofs:
    type: "array"
    items:
      $ref: "#/definitions/BlkProof"

  Subject:
    type: "integer"
    format: "int32"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
parameters:
  StudentAddr:
    in: "path"
    name: "studentAddr"
    description: "Student's Disciplina address"
    required: true
    type: "string"
    format: "byte"
  CourseId:
    in: "path"
    name: "courseId"
    description: "Course ID"
    required: true
    type: "integer"
    format: "int32"
  AssignmentHash:
    in: "path"
    name: "assignmentHash"
    description: "Assignment hash"
    required: true
    type: "string"
    format: "byte"
  SubmissionHash:
    in: "path"
    name: "submissionHash"
    description: "Submission hash"
    required: true
    type: "string"
    format: "byte"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
