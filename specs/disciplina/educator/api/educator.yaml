openapi: 3.0.0
info:
  description: >-
    This is an HTTP API for interacting with Disciplina Educator node on
    Educator side. It is meant to be used for integrating external systems, CRMs
    and CMSs with Disciplina
  version: 1.0.0
  title: Disciplina Educator API
  termsOfService: 'https://disciplina.io/tnc.pdf'
  contact:
    email: hi@serokell.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://localhost:8090/api/educator/v1'
  - url: 'http://localhost:8090/api/educator/v1'
security:
  - EducatorAuth: []
tags:
  - name: Students
    description: Methods for working with students and their data
  - name: Courses
    description: Methods for working with courses
  - name: Assignments
    description: Methods for working with assignments
  - name: Submissions
    description: Methods for working with submissions
  - name: Grades
    description: Methods for working with grades
  - name: Proofs
    description: Methods for working with proofs
paths:
  /students:
    get:
      tags:
        - Students
      summary: Get a list of all registered students' addresses
      operationId: getStudents
      parameters:
        - $ref: '#/components/parameters/CourseFilter'
        - in: query
          name: isEnrolled
          description: >-
            If set to `true`, get only students attending at least one course.
            If set to `false`, get only students not attending any courses.
            Otherwise, get all of them.
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/OnlyCount'
      responses:
        200:
          description: A list of all registered students' addresses
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/Count'
                  students:
                    type: array
                    items:
                      $ref: '#/components/schemas/Student'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Students
      summary: Add a new student address to a database
      operationId: addStudent
      responses:
        201:
          description: Successful operation
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
        description: Student object that needs to be added to the system
        required: true
  /students/{student}:
    delete:
      tags:
        - Students
      summary: Remove a student from a database
      description: >-
        Removes a student only if he's not currently attending any course. We
        will not automatically perform a cascade deletion, because it will make
        this operation particularly dangerous. If a student attends any course,
        an error will be raised.
      operationId: deleteStudent
      parameters:
        - $ref: '#/components/parameters/Student'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        400:
          description: Invalid address value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Student cannot be deleted, as they are currently attending a course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        404:
          description: Student with given address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
  /students/{student}/courses:
    post:
      tags:
        - Students
      summary: Enroll a student in a new course
      description: Given existing student and course, enroll the student to the course.
      operationId: addStudentCourse
      parameters:
        - $ref: '#/components/parameters/Student'
      responses:
        201:
          description: Successful operation
        400:
          description: Student address value or request body is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Course with given ID does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        404:
          description: Student with given address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        409:
          description: Student is already enrolled on this course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentCourse'
        description: Course to enroll
        required: true
  /students/{student}/assignments:
    post:
      tags:
        - Students
      summary: Assign an assignment to a student
      description: Assigns a new assignment to a student in scope of given course.
      operationId: addStudentAssignment
      parameters:
        - $ref: '#/components/parameters/Student'
      responses:
        201:
          description: Successful operation
        400:
          description: Student address value or request body is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Assignment with given hash does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        404:
          description: Student with given address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        409:
          description: Student is already subscribed on assignment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentAssignment'
        description: Assignment to assign
        required: true
  /students/{student}/assignments/{assignment}:
    delete:
      tags:
        - Students
      summary: Unassign an assignment from a student
      description: >-
        If given student has been assigned a given assignment, then unassigns it
        from them, otherwise raises error.
      operationId: deleteStudentAssignment
      parameters:
        - $ref: '#/components/parameters/Student'
        - $ref: '#/components/parameters/Assignment'
      responses:
        400:
          description: Student address or assignment hash are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Given student didn't have given assignment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

  /courses:
    get:
      tags:
        - Courses
      summary: Get all courses
      operationId: getCourses
      parameters:
        - $ref: '#/components/parameters/StudentFilter'
        - $ref: '#/components/parameters/OnlyCount'
      responses:
        200:
          description: A list of all courses
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/Count'
                  courses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Courses
      summary: Add a new course to a database
      operationId: addCourse
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Id'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
        description: Course object that needs to be added to the system
        required: true
  /course/{course}:
    get:
      tags:
        - Courses
      summary: Get info about a course
      description: Gets a course data by given course ID.
      operationId: getCourse
      parameters:
        - $ref: '#/components/parameters/Course'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Course ID is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Course with given ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

  /assignments:
    get:
      tags:
        - Assignments
      summary: Get all assignments
      description: >-
        Gets a list of all student assignments. Filter parameters are used to
        specify specific course or student.
      operationId: getAssignments
      parameters:
        - $ref: '#/components/parameters/CourseFilter'
        - $ref: '#/components/parameters/StudentFilter'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/OnlyCount'
        - in: query
          name: isFinal
          description: Return only final/non-final assignments of the course
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/Count'
                  assignments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Assignment'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Assignments
      summary: Add assignment
      operationId: addAssignment
      parameters:
        - in: query
          name: autoAssign
          description: >-
            Automatically subscribe all students attending related course to new
            assignment.
          required: false
          allowEmptyValue: true
          schema:
            type: boolean
      responses:
        201:
          description: Successful operation
        400:
          description: Request body is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
        description: An assignment
        required: true

  /submissions:
    get:
      tags:
        - Submissions
      summary: Get all submissions
      description: >-
        Gets a list of all submissions done by all students. This method is
        inaccessible by students.
      operationId: getSubmissions
      parameters:
        - $ref: '#/components/parameters/CourseFilter'
        - $ref: '#/components/parameters/StudentFilter'
        - $ref: '#/components/parameters/AssignmentFilter'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/OnlyCount'
        - in: query
          name: isGraded
          description: Return only submissions with/without grade
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/Count'
                  submissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Submission'
        401:
          $ref: '#/components/responses/Unauthorized'
  /submissions/{submission}:
    get:
      tags:
        - Submissions
      summary: Get info about a submission
      description: Gets a submission data by given submission hash.
      operationId: getSubmission
      parameters:
        - $ref: '#/components/parameters/Submission'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        400:
          description: Submission hash value is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Submission with given hash not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
    delete:
      tags:
        - Submissions
      summary: Delete a submission
      description: >-
        Deletes a submission from a database. Only ungraded submissions can be
        deleted.
      operationId: deleteSubmission
      parameters:
        - $ref: '#/components/parameters/Submission'
      responses:
        200:
          description: Successful operation
        400:
          description: Submission hash value is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Submission has already been graded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        404:
          description: Submission with given hash not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

  /grades:
    get:
      tags:
        - Grades
      summary: Get all grades
      description: Gets a list of all grades performed by all students.
      operationId: getGrades
      parameters:
        - $ref: '#/components/parameters/CourseFilter'
        - $ref: '#/components/parameters/StudentFilter'
        - $ref: '#/components/parameters/AssignmentFilter'
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/OnlyCount'
        - in: query
          name: isFinal
          description: Return only grades for final/non-final assignments of the course
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/Count'
                  grades:
                    type: array
                    items:
                      $ref: '#/components/schemas/Grade'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Grades
      summary: Post a new grade
      description: Posts a new grade with a given body.
      operationId: addGrade
      responses:
        201:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grade'
        400:
          description: Request body is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Grade'
        description: A grade
        required: true

  /proofs:
    get:
      tags:
        - Proofs
      summary: Get Merkle proofs of grades (i. e. private blocks or parts of them)
      description: >-
        Gets all private transactions related with corresponding Merkle proofs,
        grouped by blocks.
      operationId: getProofs
      parameters:
        - $ref: '#/components/parameters/CourseFilter'
        - $ref: '#/components/parameters/StudentFilter'
        - $ref: '#/components/parameters/AssignmentFilter'
        - $ref: '#/components/parameters/OnlyCount'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/Count'
                  proofs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proof'
        400:
          description: Student address value is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Student with given address not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
components:
  parameters:
    # Path parameters
    Course:
      in: path
      name: course
      description: Course ID
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    Student:
      in: path
      name: student
      description: Student's Disciplina address
      required: true
      schema:
        $ref: '#/components/schemas/Address'
    Assignment:
      in: path
      name: assignment
      description: Assignment hash
      required: true
      schema:
        $ref: '#/components/schemas/Hash'
    Submission:
      in: path
      name: submission
      description: Submission hash
      required: true
      schema:
        $ref: '#/components/schemas/Hash'

    # Query filters
    CourseFilter:
      in: query
      name: course
      description: Filter result items by given course
      required: false
      schema:
        $ref: '#/components/schemas/Id'
    StudentFilter:
      in: query
      name: student
      description: Filter result items by given student
      required: false
      schema:
        $ref: '#/components/schemas/Address'
    AssignmentFilter:
      in: query
      name: assignment
      description: Filter result items by given assignment
      required: false
      schema:
        $ref: '#/components/schemas/Hash'
    SinceFilter:
      in: query
      name: since
      description: Return only items starting with the given time
      required: false
      schema:
        $ref: '#/components/schemas/Time'
    OnlyCount:
      in: query
      name: onlyCount
      description: If this parameter is present, return only the total count of items
      required: false
      allowEmptyValue: true
      schema:
        type: boolean

  responses:
    Unauthorized:
      description: Unauthorized
      headers:
        WWW-Authenticate:
          schema:
            type: string

  schemas:
    # Primitives
    Id:
      type: integer
      format: int32
      description: Numeric item ID
    Hash:
      type: string
      format: hex
      description: Blake2b (256 bits) hash
    Address:
      type: string
      format: base58
      description: Disciplina address
    Time:
      type: string
      format: date-time
      description: Time in ISO format

    # Entities
    Student:
      type: object
      required:
        - addr
      properties:
        addr:
          $ref: '#/components/schemas/Address'
    StudentCourse:
      type: object
      required:
        - course
      properties:
        course:
          $ref: '#/components/schemas/Id'
    StudentAssignment:
      type: object
      required:
        - assignment
      properties:
        assignment:
          $ref: '#/components/schemas/Hash'
    Course:
      type: object
      required:
        - id
        - desc
        - subjects
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/Id'
            - readOnly: true
        desc:
          type: string
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
    Subject:
      type: integer
      format: int32
    Assignment:
      type: object
      required:
        - hash
        - timestamp
        - courseId
        - contentsHash
        - isFinal
        - desc
      properties:
        hash:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/Hash'
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Time'
            - readOnly: true
        courseId:
          $ref: '#/components/schemas/Id'
        contentsHash:
          $ref: '#/components/schemas/Hash'
        isFinal:
          type: boolean
        desc:
          type: string
    Submission:
      type: object
      required:
        - hash
        - timestamp
        - contentsHash
        - assignmentHash
        - studentAddr
        - witness
      properties:
        hash:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/Hash'
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Time'
            - readOnly: true
        contentsHash:
          $ref: '#/components/schemas/Hash'
        assignmentHash:
          $ref: '#/components/schemas/Hash'
        studentAddr:
          $ref: '#/components/schemas/Address'
        witness:
          type: string
          format: binary
    Grade:
      type: object
      required:
        - timestamp
        - submissionHash
        - grade
        - hasProof
      properties:
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Time'
            - readOnly: true
        submissionHash:
          $ref: '#/components/schemas/Hash'
        grade:
          type: integer
          format: int32
        hasProof:
          type: boolean
          readOnly: true
    Transaction:
      type: object
      required:
        - submission
        - grade
        - timestamp
      properties:
        submission:
          $ref: '#/components/schemas/Submission'
        grade:
          type: integer
          format: int32
        timestamp:
          $ref: '#/components/schemas/Time'
    Proof:
      type: object
      required:
        - mtreeSerialized
        - txs
      properties:
        mtreeSerialized:
          type: string
          format: binary
        txs:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'

    # Errors
    ErrResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          enum:
            - InvalidFormat
            - StudentNotFound
            - CourseNotFound
            - AssignmentNotFound
            - StudentAlreadyExists
            - CourseAlreadyExists
            - AssignmentAlreadyExists
            - StudentDoesNotAttendCourse
            - StudentIsActive
            - StudentHasNoAssignment
          description: |-
            Error type:
              * `InvalidFormat` - Failed to deserialise one of parameters.

              * `StudentNotFound` - Specified student does not exist.
              * `CourseNotFound` - Specified course does not exist.
              * `AssignmentNotFound` - Specified assignment does not exist.

              * `StudentAlreadyExists` - Student being added already exists.
              * `CourseAlreadyExists` - Course with such id already exists.
              * `AssignmentAlreadyExists` - Exactly the same assignment already exists.
              * `StudentDoesNotAttendCourse` - Student does not attend the course.

              * `StudentAlreadyAttendsCourse` - Student already attends given course.
              * `StudentAlreadyHasAssignment` - Student is already subscribed on given assignment.
              * `StudentHasNoAssignment` - Given student didn't have given assignment.

              * `StudentIsActive` - Can not delete a student because he is attending a course.
              * `DeletingGradedSubmission` - Attempt to delete an already graded submission.
  securitySchemes:
    EducatorAuth:
      type: apiKey
      name: Authorization
      in: header
      description: |
        Authentication system requires a JWS in Authorization header in `Bearer <JWS>` format. Example header:
        ```
        Authorization: Bearer eyJhbGciOiJFZERTQSIsImp3ayI6eyJjcnYiOiJFZDI1NTE5IiwieCI6InFlU3ZrUzZnaW9CcjRlX2I2em8zTWlPT1NYQW90VjkwdDVLajNsMjh5cm8iLCJrdHkiOiJPS1AifX0.eyJwYXRoIjoiL2FwaS9lZHVjYXRvci92MS9zdHVkZW50cyIsInRpbWUiOiIyMDI1LTAxLTAxVDAwOjAwOjAwWiJ9.0_sRvkXTaJTlnLHSjReH70VNFOLx0kdGHDmiDWhUr6H25UCvc5kPD6qn9pDlUwe0uKMpQCGIt_v4hnwWcfVlDA
        ```

        JWS header MUST contain "jwk" parameter ([RFC7515, section 4.1.3](https://tools.ietf.org/html/rfc7515#section-4.1.3)) with a
        public JWK corresponding to the signature. JWK MUST have key type "OKP" and curve type "Ed25519", public key parameter "x"
        should be encoded via base64Url (accordingly to [RFC8037](https://tools.ietf.org/html/rfc8037)). Example JWK:
        ```
        { "kty": "OKP", "crv": "Ed25519", "x": "2qbm2mPrVVW_yFsHUMzNt3hLdalGLTN8ucI4e-Cn6fI" }
        ```
        This JWK represents a Disciplina public key of an Educator. The whole JWS should be created via the Educator's secret key.
        JWS payload MUST be a JSON object with fields "path" and "time". Field "path" should contain the endpoint URL path and "time"
        should contain the time the request has been made in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. Example JWS
        payload:
        ```
        {
          "time": "2025-01-01T00:00:00.000000000Z",
          "path": "/api/educator/v1/students"
        }
        ```
        If the request's raw path doesn't match the one in "path" or "time" is more than 5 minutes behind the server current time,
        the authentication process will fail.
