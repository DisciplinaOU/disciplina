openapi: 3.0.0
info:
  description: >-
    This is an HTTP API for interacting with Disciplina Educator node from
    Student side. It is used by Student application to receive info about
    assignments and grades, submit submissions and fetch proofs of grades from
    Educator.
  version: 0.1.0
  title: Disciplina Student API
  termsOfService: 'https://disciplina.io/tnc.pdf'
  contact:
    email: hi@serokell.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'https://localhost:8090/api/student/v1'
  - url: 'http://localhost:8090/api/student/v1'
security:
  - StudentAuth: []
tags:
  - name: Courses
    description: Methods for working with student's courses.
  - name: Assignments
    description: Methods for working with student's assignments.
  - name: Submissions
    description: Methods for working with student's submissions.
  - name: Proofs
    description: Methods for working with private transactions and grade's proofs
paths:
  /courses:
    get:
      tags:
        - Courses
      summary: Get Educator's courses
      description: Gets a list of Educator\'s courses, both enrolled and available.
      operationId: getCourses
      parameters:
        - in: query
          name: isEnrolled
          required: false
          description: >-
            If set to `true`, show only courses in which student is currently
            enrolled, if set to `false` - show only available courses, otherwise
            should all of them.
          schema:
            type: boolean
        - $ref: '#/components/parameters/OnlyCount'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/Count'
                  courses:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
        401:
          $ref: '#/components/responses/Unauthorized'
  /courses/{course}:
    get:
      tags:
        - Courses
      summary: Get info about the course
      description: Gets all info about the given course.
      operationId: getCourse
      parameters:
        - $ref: '#/components/parameters/Course'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        400:
          description: Course ID is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: Course with given ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

  /assignments:
    get:
      tags:
        - Assignments
      summary: Get student's assignments
      description: >-
        Gets a list of student\'s assignments. Filter parameters are used to
        specify specific course, type, etc.
      operationId: getAssignments
      parameters:
        - $ref: '#/components/parameters/CourseFilter'
        - $ref: '#/components/parameters/DocumentTypeFilter'
        - $ref: '#/components/parameters/OnlyCount'
        - in: query
          name: isFinal
          required: false
          description: Select only final/non-final assignments
          schema:
            type: boolean
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/Count'
                  assignments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Assignment'
        401:
          $ref: '#/components/responses/Unauthorized'
  /assignments/{assignment}:
    get:
      tags:
        - Assignments
      summary: Get info about an assignment
      description: >-
        Gets an assignment info by given assignment hash. Returns 404 if a
        student tries to get an assignment which is not assigned to them.
      operationId: getAssignment
      parameters:
        - $ref: '#/components/parameters/Assignment'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: >-
            Assignment with given hash not found (or a user has no rights to
            look it up)

  /submissions:
    get:
      tags:
        - Submissions
      summary: Get student's submissions
      description: >-
        Gets a list of student\'s submissions. Filter parameters are used to
        specify specific course, assignment, etc.
      operationId: getSubmissions
      parameters:
        - $ref: '#/components/parameters/CourseFilter'
        - $ref: '#/components/parameters/AssignmentFilter'
        - $ref: '#/components/parameters/DocumentTypeFilter'
        - $ref: '#/components/parameters/OnlyCount'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/Count'
                  submissions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Submission'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      tags:
        - Submissions
      summary: Make a new submission
      description: >-
        Posts a new submission with a given body. Request body should contain
        valid student\'s signature of submission contents, otherwise an error
        will be raised.
      operationId: makeSubmission
      responses:
        201:
          description: Successful operation
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Either submission body or submission signature is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedSubmission'
        description: A submission
        required: true
  /submissions/{submission}:
    get:
      tags:
        - Submissions
      summary: Get info about a submission
      description: >-
        Gets a submission data by given submission hash. Returns a 404 if a
        student tries to get a submission which is not their own.
      operationId: getSubmission
      parameters:
        - $ref: '#/components/parameters/Submission'
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
        400:
          description: Submission hash value is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          description: >-
            Submission with given hash was not found (or a user has no rights to
            look it up)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
    delete:
      tags:
        - Submissions
      summary: Delete a submission
      description: >-
        Deletes a submission from a database. Only ungraded submissions can be
        deleted.
      operationId: deleteSubmission
      parameters:
        - $ref: '#/components/parameters/Submission'
      responses:
        200:
          description: Successful operation
        400:
          description: Submission hash value is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Cannot delete a graded submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'
        404:
          description: Submission with given hash not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrResponse'

  /proofs:
    get:
      tags:
        - Proofs
      summary: Get available proofs for student
      description: >-
        Gets private transactions together with corresponding Merkle subtrees.
        Transactions from same blocks are grouped together and each group has
        one proof, which is a corresponding Merkle subtree.
      operationId: getProofs
      parameters:
        - $ref: '#/components/parameters/SinceFilter'
        - $ref: '#/components/parameters/OnlyCount'
      responses:
        200:
          description: successfull operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/Count'
                  proofs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Proof'
        401:
          $ref: '#/components/responses/Unauthorized'
components:
  parameters:
    # Path parameters
    Course:
      in: path
      name: course
      description: Course ID
      required: true
      schema:
        $ref: '#/components/schemas/Id'
    Assignment:
      in: path
      name: assignment
      description: Assignment hash
      required: true
      schema:
        $ref: '#/components/schemas/Hash'
    Submission:
      in: path
      name: submission
      description: Submission hash
      required: true
      schema:
        $ref: '#/components/schemas/Hash'

    # Query filters
    CourseFilter:
      in: query
      name: course
      description: Filter result items by given course
      required: false
      schema:
        $ref: '#/components/schemas/Id'
    AssignmentFilter:
      in: query
      name: assignment
      description: Filter result items by given assignment
      required: false
      schema:
        $ref: '#/components/schemas/Hash'
    DocumentTypeFilter:
      in: query
      name: type
      description: Type of assignment or submission
      required: false
      schema:
        type: string
        enum:
          - online
          - offline
    SinceFilter:
      in: query
      name: since
      description: Return only items starting with the given time
      required: false
      schema:
        $ref: '#/components/schemas/Time'
    OnlyCount:
      in: query
      name: onlyCount
      description: If this parameter is present, return only the total count of items
      required: false
      allowEmptyValue: true
      schema:
        type: boolean

  responses:
    Unauthorized:
      description: Unauthorized
      headers:
        WWW-Authenticate:
          schema:
            type: string

  schemas:
    # Primitives
    Id:
      type: integer
      format: int32
      description: Numeric item ID
    Hash:
      type: string
      format: hex
      description: Blake2b (256 bits) hash
    Address:
      type: string
      format: base58
      description: Disciplina address
    Time:
      type: string
      format: date-time
      description: Time in ISO format
    Count:
      type: integer
      format: int32
      description: Count of items returned

    # Entities
    Course:
      type: object
      required:
        - id
        - desc
        - subjects
        - isEnrolled
        - isFinished
      properties:
        id:
          $ref: '#/components/schemas/Id'
        desc:
          type: string
        subjects:
          type: array
          items:
            $ref: '#/components/schemas/Subject'
        isEnrolled:
          type: boolean
        isFinished:
          type: boolean
    Subject:
      type: integer
      format: int32
    Assignment:
      type: object
      required:
        - hash
        - timestamp
        - courseId
        - contentsHash
        - isFinal
        - desc
      properties:
        hash:
          $ref: '#/components/schemas/Hash'
        timestamp:
          $ref: '#/components/schemas/Time'
        courseId:
          $ref: '#/components/schemas/Id'
        contentsHash:
          $ref: '#/components/schemas/Hash'
        isFinal:
          type: boolean
        desc:
          type: string
        lastSubmission:
          $ref: '#/components/schemas/Submission'
    Submission:
      type: object
      required:
        - hash
        - timestamp
        - contentsHash
        - assignmentHash
      properties:
        hash:
          allOf:
            - readOnly: true
            - $ref: '#/components/schemas/Hash'
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Time'
            - readOnly: true
        contentsHash:
          $ref: '#/components/schemas/Hash'
        assignmentHash:
          $ref: '#/components/schemas/Hash'
        grade:
          $ref: '#/components/schemas/Grade'
    SignedSubmission:
      type: object
      required:
        - submission
        - witness
      properties:
        submission:
          type: object
          required:
            - studentId
            - contentsHash
            - assignment
          properties:
            studentId:
              $ref: '#/components/schemas/Address'
            contentsHash:
              $ref: '#/components/schemas/Hash'
            assignment:
              type: object
              required:
                - courseId
                - contentsHash
                - type
                - desc
              properties:
                courseId:
                  $ref: '#/components/schemas/Id'
                contentsHash:
                  $ref: '#/components/schemas/Hash'
                type:
                  type: string
                  enum:
                    - regular
                    - courseFinal
                desc:
                  type: string
        witness:
          type: string
          format: binary
          description: >-
            Concatenated student public key and submission hash signed with
            student secret key.
      example:
        assignmentHash: 3ac844212387a8ed8a1702a3ba7309bd2841f7d2959749fecd08781d986480d3
        contentsHash: 7b6d0c6de38639cc6063e9c36f9dcdb71fff60fe551ccc757246a3bf2fa00f37
        witness: >-
          830058206adc59f0c7c600740614cc9e008e8d498e641a48d012b8cc532d9fc8b6709b7e5840601d28410a8ccd18065738d8ddaee331922963757565e9716d973c9a306d919f8e15cd4d3d6cac59a2049c926eb66aafd277965886dcb0cfa67afc90d8a1c902
    Grade:
      type: object
      required:
        - timestamp
        - submissionHash
        - grade
        - hasProof
      properties:
        timestamp:
          $ref: '#/components/schemas/Time'
        submissionHash:
          $ref: '#/components/schemas/Hash'
        grade:
          type: integer
          format: int32
        hasProof:
          type: boolean
    Transaction:
      type: object
      required:
        - signedSubmission
        - grade
        - timestamp
      properties:
        signedSubmission:
          $ref: '#/components/schemas/SignedSubmission'
        grade:
          type: integer
          format: int32
        timestamp:
          $ref: '#/components/schemas/Time'
    Proof:
      type: object
      required:
        - mtreeSerialized
        - txs
      properties:
        mtreeSerialized:
          type: string
          format: binary
        txs:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'

    # Errors
    ErrResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          enum:
            - SubmissionSignatureInvalid
            - FakeSubmissionSignature
            - DeletingGradedSubmission
            - CourseDoesNotExist
            - StudentDoesNotExist
            - AssignmentDoesNotExist
            - StudentWasNotEnrolledOnTheCourse
            - StudentWasNotSubscribedOnAssignment
            - SubmissionDoesNotExist
            - TransactionDoesNotExist
            - SubmissionAlreadyExists
          description: |-
            * `SubmissionSignatureInvalid`: Signature does not match to claimed submission author.
            * `FakeSubmissionSignature`: Claimed owner of submission does not match to authenticated user.
            * `DeletingGradedSubmission`: Attempt to delete an already graded submission.
            * `CourseDoesNotExist`: Given course does not exist.
            * `StudentDoesNotExist`: Given student is not known to the educator.
            * `AssignmentDoesNotExist`: Given assignment does not exist.
            * `StudentWasNotEnrolledOnTheCourse`: Cannot perform this operation because student is not enrolled on the course.
            * `StudentWasNotSubscribedOnAssignment`: Cannot perform this operation because student is not subscribed on this assignment.
            * `SubmissionDoesNotExist`: Submission does not exist.
            * `TransactionDoesNotExist`: Transaction does not exist.
            * `SubmissionAlreadyExists`: Exactly the same submission has already been submitted.
  securitySchemes:
    StudentAuth:
      type: apiKey
      name: Authorization
      in: header
      description: |
        Authentication system requires a JWS in Authorization header in `Bearer <JWS>` format. Example header:
        ```
        Authorization: Bearer eyJhbGciOiJFZERTQSIsImp3ayI6eyJjcnYiOiJFZDI1NTE5IiwieCI6InFlU3ZrUzZnaW9CcjRlX2I2em8zTWlPT1NYQW90VjkwdDVLajNsMjh5cm8iLCJrdHkiOiJPS1AifX0.eyJwYXRoIjoiL2FwaS9zdHVkZW50L3YxL2NvdXJzZXMiLCJ0aW1lIjoiMjAyNS0wMS0wMVQwMDowMDowMFoifQ.JYO_dINCZWhzHuER7377ETxf-Vg1Sw9eImc5cVxrFKFP9PlIXS9fGlzvrKsSpe8FbkAsYkU_cjBoBiaVx6KiDA
        ```

        JWS header MUST contain "jwk" parameter ([RFC7515, section 4.1.3](https://tools.ietf.org/html/rfc7515#section-4.1.3)) with a
        public JWK corresponding to the signature. JWK MUST have key type "OKP" and curve type "Ed25519", public key parameter "x"
        should be encoded via base64Url (accordingly to [RFC8037](https://tools.ietf.org/html/rfc8037)). Example JWK:
        ```
        { "kty": "OKP", "crv": "Ed25519", "x": "2qbm2mPrVVW_yFsHUMzNt3hLdalGLTN8ucI4e-Cn6fI" }
        ```
        This JWK represents a Disciplina public key of a Student querying the API. The whole JWS should be created via the Student's secret key.
        JWS payload MUST be a JSON object with fields "path" and "time". Field "path" should contain the endpoint URL path and "time"
        should contain the time the request has been made in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format. Example JWS
        payload:
        ```
        {
          "time": "2025-01-01T00:00:00.000000000Z",
          "path": "/api/student/v1/courses"
        }
        ```
        If the request's raw path doesn't match the one in "path" or "time" is more than 5 minutes behind the server current time,
        the authentication process will fail.